FROM node:20-alpine AS base

# Set working directory
WORKDIR /app


# Copy package files
COPY package*.json ./

# Install dependencies including dev dependencies for building
RUN npm ci --only=production --silent && npm cache clean --force

# Development stage
FROM base AS development
RUN npm ci --silent && npm cache clean --force
COPY . .
EXPOSE 3000
CMD ["npm", "run", "start:dev"]

# Build stage
FROM base AS build

# Install all dependencies (including dev)
RUN npm ci --silent && npm cache clean --force

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Remove dev dependencies
RUN npm prune --production

# Production stage
FROM node:18-alpine AS production

# Create app directory
WORKDIR /app

# Install dumb-init for proper signal handling
# RUN apk add --no-cache dumb-init

# # Create non-root user for security
# RUN addgroup -g 1001 -S nodejs && \
#     adduser -S nestjs -u 1001

# Copy built application and node_modules from build stage
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=build --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nestjs:nodejs /app/package*.json ./

# Create uploads directory with proper permissions
RUN mkdir -p /app/uploads/documents && \
    chown -R nestjs:nodejs /app/uploads

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Switch to non-root user
USER nestjs

# Health check
# HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
#     CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# # Use dumb-init to handle signals properly
# ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]
